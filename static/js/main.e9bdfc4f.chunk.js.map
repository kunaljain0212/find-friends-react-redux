{"version":3,"sources":["serviceWorker.js","components/Cards.js","components/Cardlist.js","components/Searchbox.js","components/Scroll.js","components/Errorboundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Cards","props","className","src","id","alt","name","contact","email","Cardlist","data","map","user","i","key","Searchbox","searchChange","type","placeholder","onChange","divStyle","overflow","border","height","Scroll","style","children","Errorboundary","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","searchfield","target","value","fetch","then","response","json","users","filterdata","filter","toLowerCase","includes","length","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sCCHSC,EAbD,SAACC,GACb,OACE,yBAAKC,UAAY,uDACf,yBAAKC,IAAG,+BAA0BF,EAAMG,GAAhC,YAA8CC,IAAI,qBAC1D,6BACE,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,SACV,2BAAIN,EAAMO,UCiBHC,EAvBE,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAKlB,OACE,6BACGA,EAAKC,KAAI,SAACC,EAAMC,GACf,OACE,kBAAC,EAAD,CACEC,IAAKF,EAAKR,GACVA,GAAIQ,EAAKR,GACTE,KAAMM,EAAKN,KACXC,QAASK,EAAKL,QACdC,MAASI,EAAKJ,aCDXO,EAdG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKd,UAAY,OACb,2BACAA,UAAY,mCACZe,KAAO,SACPC,YAAc,iBACdC,SAAYH,MCPlBI,EAAW,CACfC,SAAU,SACVC,OAAQ,kBACRC,OAAQ,SAMKC,EAJA,SAACvB,GACd,OAAO,yBAAKwB,MAAOL,GAAWnB,EAAMyB,WCevBC,G,wDAnBX,WAAY1B,GAAO,IAAD,8BACd,gBACK2B,MAAQ,CACTC,UAAU,GAHA,E,8DAOAC,EAAQC,GACtBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAIG,KAAKJ,MAAMC,SACJ,8DAEJG,KAAK/B,MAAMyB,a,GAhBEQ,cC8CbC,E,kDAxCb,aAAe,IAAD,8BACZ,gBAcFC,eAAiB,SAACC,GAChB,EAAKJ,SAAS,CAAEK,YAAaD,EAAME,OAAOC,SAd1C,EAAKZ,MAAQ,CACXlB,KAAM,GACN4B,YAAa,IAJH,E,gEAQO,IAAD,OAClBG,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACL,EAAKZ,SAAS,CAAEvB,KAAMmC,S,+BAMlB,IAAD,OACDC,EAAad,KAAKJ,MAAMlB,KAAKqC,QAAO,SAACrC,GACzC,OAAOA,EAAKJ,KACT0C,cACAC,SAAS,EAAKrB,MAAMU,YAAYU,kBAErC,OAAkC,IAA3BhB,KAAKJ,MAAMlB,KAAKwC,OACrB,0CAEA,yBAAKhD,UAAU,MACb,wBAAIA,UAAU,MAAd,WACA,kBAAC,EAAD,CAAWc,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU1B,KAAMoC,W,GAjCVZ,aCDlBiB,IAASC,OAAQ,kBAAC,EAAD,MAASC,SAASC,eAAe,SP4H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBf,MAAK,SAAAgB,GACJA,EAAaC,gBAEdC,OAAM,SAAA9B,GACL+B,QAAQ/B,MAAMA,EAAMgC,a","file":"static/js/main.e9bdfc4f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\n\nconst Cards = (props) => {\n  return (\n    <div className = 'bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5 tc'>\n      <img src={`https://robohash.org/${props.id}?200x200`} alt=\"Girl in a jacket\"></img>\n      <div>\n        <h2>{props.name}</h2>\n        <p>{props.contact}</p>\n        <p>{props.email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Cards;\n","import React from \"react\";\nimport Cards from \"./Cards\";\n\nconst Cardlist = ({ data }) => {\n  // if (true) {\n  //   throw new Error('Noooooooo!!');\n  // }\n\n  return (\n    <div>\n      {data.map((user, i) => {\n        return (\n          <Cards\n            key={user.id}\n            id={user.id}\n            name={user.name}\n            contact={user.contact}\n            email = {user.email}\n          />\n        );\n        //return <Cards key = {i} id={data[i].id} name={data[i].name} contact={data[i].contact} />\n      })}\n    </div>\n  );\n};\n\nexport default Cardlist;\n","import React from 'react';\n\nconst Searchbox = ({searchChange}) => {\n    return (\n        <div className = 'pa2'>\n            <input \n            className = 'pa3 ba b--green bg-lightest-blue'\n            type = 'search' \n            placeholder = 'Search Friends'\n            onChange = {searchChange}\n            />\n        </div>\n        \n    )\n}\n\nexport default Searchbox ;\n","import React from \"react\";\n\nconst divStyle = {\n  overflow: \"scroll\",\n  border: \"5px solid black\",\n  height: \"800px\",\n};\nconst Scroll = (props) => {\n  return <div style={divStyle}>{props.children}</div>;\n};\n\nexport default Scroll;\n","// import React from 'react';\nimport React, { Component } from 'react';\n\nclass Errorboundary extends Component {\n    constructor(props){\n        super()\n        this.state = {\n            hasError: false,\n        }\n    }\n\n    componentDidCatch(error , info){\n        this.setState({hasError: true})\n    }\n\n    render(){\n        if (this.state.hasError) {\n            return <h1>Ooooooopss. This is not good!!</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default Errorboundary;","import React, { Component } from \"react\";\nimport Cardlist from \"../components/Cardlist\";\n// import data from \"./data\";\nimport Searchbox from \"../components/Searchbox\";\nimport Scroll from \"../components/Scroll\";\nimport \"./App.css\";\nimport Errorboundary from \"../components/Errorboundary\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      data: [],\n      searchfield: \"\",\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => {\n        this.setState({ data: users });\n      });\n  }\n  onSearchChange = (event) => {\n    this.setState({ searchfield: event.target.value });\n  };\n  render() {\n    const filterdata = this.state.data.filter((data) => {\n      return data.name\n        .toLowerCase()\n        .includes(this.state.searchfield.toLowerCase());\n    });\n    return this.state.data.length === 0 ? (\n      <h1>Loading!!!</h1>\n    ) : (\n      <div className=\"tc\">\n        <h1 className=\"f1\">FRIENDS</h1>\n        <Searchbox searchChange={this.onSearchChange} />\n        <Scroll>\n          <Errorboundary>\n            <Cardlist data={filterdata} />\n          </Errorboundary>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"tachyons\";\nimport App from \"./containers/App\";\n\nReactDOM.render( <App/> , document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}